import React, { createContext, useCallback, useState, useContext } from 'react';
import api from '../services/api';

interface AuthState {
    token: string,
    user: object
}

interface SignInCredencials {
    email: string,
    senha: string,
}

interface AuthContextData {
    user: object;
    signIn(credentials: SignInCredencials): Promise<void>;
    signOut(): void,
}

const AuthContext = createContext<AuthContextData>({} as AuthContextData);

const AuthProvider: React.FC = ({ children }) => {

    const [data, setData] = useState<AuthState>(() => {

        const token = localStorage.getItem('@restToken: token');
        const user = localStorage.getItem('@restToken: User');

        if (token && user) {
            return { token, user: JSON.parse(user) };
        }
        return {} as AuthState
    });

    const signIn = useCallback(async ({ email, senha }) => {

        try {
            const response = await api.post('login', { email, senha }); //chamada do banco
            const { token, user } = response.data;
            localStorage.setItem('@restToken: token', token)
            localStorage.setItem('@restToken: User', JSON.stringify(user))

            setData({ token, user })
        } catch (err) {
            alert('Erro no Login, tente novamente... ' + err);
        }

    }, [])

    const signOut = useCallback(() => {
        localStorage.removeItem('@restToken: token')
        localStorage.removeItem('@restToken: User')
    }, [])

    return (
        <AuthContext.Provider value={{ user: data.user, signIn, signOut }}>
            {children}
        </AuthContext.Provider>
    )
}

function useAuth(): AuthContextData {
    const context = useContext(AuthContext)

    if (!context) {
        throw new Error('useAuth deve estar dentro de um AuthProvide');
    }
    return context
}

export { AuthProvider, useAuth }



